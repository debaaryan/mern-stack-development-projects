$primary-color: dodgerblue;
body {
  background: $primary-color;
  font-family: Arial, Helvetica, sans-serif;
}
#container {
  width: 80%;
  height: 90%;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}
h1 {
  color: $primary-color;
  font-size: 20px;
}
span {
  color: $primary-color;
}
#header {
  background-color: #fff;
  padding: 1px 10px;
  text-align: center;
}
ul {
  list-style: none;
  display: flex;
  border: 2px solid white;
  padding: 10px;
  justify-content: space-between;
}
@import "links";

#content {
  display: flex;
  height: 80%;
}

#sidebar {
  background-color: skyblue;
  padding: 20px;
  width: 800px;
}

#ads {
  background-color: gold;
  //   @extend #sidebar;
}

#main {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}

@mixin bd-radius($rad) {
  -webkit-border-radius: $rad;
  -moz-border-radius: $rad;
  border-radius: $rad;
}
@mixin box-shadow($top: 10px, $left: 10px, $blur: 10px, $color: burlywood) {
  -webkit-box-shadow: $top $left $blur $color;
  -moz-box-shadow: $top $left $blur $color;
  box-shadow: $top $left $blur $color;
}
#article1 {
  background-color: khaki;
  width: 50%;
  padding: 15px;
  align-self: center;
  @include bd-radius(5px);
  @include box-shadow(10px, 10px, 10px, rgb(255, 234, 0));
}
#article2 {
  background-color: lightpink;
  @include bd-radius(20px);
  @include box-shadow(-10px, 10px, 10px, magenta);
  @extend #article1;
}
%article-style {
  // invisible placeholder (for reusable code)
  width: 50%;
  padding: 15px;
  align-self: center;
}
#article3 {
  background-color: yellowgreen;
  @include bd-radius(20px);
  @include box-shadow();
  @extend %article-style;
}

#equality-relational-boolean-operators {
  padding: 10px == 10px; // true
  padding: 10px == 10em; // false
  padding: 10px != 20px; // true
  padding: "arial" == arial; // true
  padding: (5px 7px 10px) == (5px 7px 10px); // : true
  padding: (6px 7px 10px) ==(5px 7px 10px); // : false
  padding: "----------";

  padding: 100px > 30px; // true
  padding: 1000ms <= 1s; // true
  padding: 1000ms >= 2s; // false
  // padding: 1000px <= 1s;    // error, different units, cannot convert scss to css
  padding: "----------";

  padding: arial == "arial" and 10px == 10; // true
  padding: arial == "arial" and 10px == 20; // false
  padding: arial == "arial" or 10px == 20; // true
  padding: not 10 == 10px; // false
  padding: not 10 != 10px; // true
}

$var1: 10;
$var2: 2;

#concatenation-arithmetic-operators {
  padding: $var1 + $var2 + px; // 12px, addition betn numbers, concatenation betn str-str, num-str
  padding: $var1 - $var2 + px; // 8px
  padding: $var1 * $var2 + px; // 20px
  padding: $var1 / $var2 + px; // 5px
  padding: $var1 % $var2 + px; // 0px
}

// interpolation for variable in property name and css selector name
@mixin margin($position, $amount) {
  margin-#{$position}: $amount + px; // cannot use margin-$position: $amount + px
}
#sidebar {
  @include margin(left, 10);
}
#ads {
  @include margin(right, 10);
}

@mixin set-icon($name) {
  .icon-#{$name} {
    background-image: url("/icons/#{$name}.png");
  }
}
@include set-icon(
  duck
); // .icon-duck {background-image: url("/icons/duck.png");}

// function returns value, mixin cannot
$container-width: 1200;

@function half($width) {
  @return $width/2 + px;
}
@function one-third($width) {
  @return $width/3 + px;
}
@function one-fourth($width) {
  @return $width/4 + px;
}

.half-width {
  width: half($container-width); // width: 600px
}
.one-third-width {
  width: one-third($container-width); // width: 400px
}
.one-fourth-width {
  width: one-fourth($container-width); // width: 300px
}

// in-built function types : numbers, strings, colors, lists, selectors, introspection
// number related functions
.testNumber {
  margin: abs(-10) + px; // 10px
  margin: ceil(4.2) + px; // 5px
  margin: ceil(9) + px; // 9px
  margin: floor(3.8) + px; // 3px
  margin: round(7.5) + px; // 8px
  margin: round(7.45) + px; // 7px
  margin: max(1px, 3px, 5px); // 5px
  margin: min(1px, 3px, 5px); // 1px
  margin: percentage(0.2); // 20%
  margin: percentage(100px / 40px); // 250%
  margin: "----------";

  margin: comparable(1px, 5px); // true
  margin: comparable(1px, 5em); // false
  margin: comparable(1cm, 12mm); // true
  margin: random(); // 0.9123877233; 0.8456866765
  margin: random(100); // 62; 100
  margin: unit(100em); // "em"
  margin: unit(100% * 2px); // "%*px"
  margin: unitless(100px); // false
  margin: unitless(100); // true
}

// string related functions
.testString {
  font-family: quote(Arial); // "Arial"
  font-family: unquote("20"); // 20
  font-family: to-upper-case("Arial"); // "ARIAL"
  font-family: to-upper-case(Arial); // ARIAL
  font-family: to-lower-case(Arial); // arial
  font-family: str-length("Helvetica Neue"); // 14
  font-family: "----------";

  font-family: str-index("Helvetica Neue", "Neue"); // 11;
  font-family: str-insert("Helvetica Neue", "Mono", 3); // "HeMonolvetica Neue"
  font-family: str-slice("Helvetica Neue", 3); // "lvetica Neue"
  font-family: str-slice("Helvetica Neue", 3, 10); // "lvetica "
  font-family: str-slice("Helvetica Neue", 3, -7); // "lvetic"
  font-family: unique-id(); // ugt968z6h or uhc5p42t2; 9 char id
}

// color related functions
$base-color: pink;

#article2 {
  background-color: $base-color;
}
#article2:hover {
  background-color: darken($base-color, 30); // background-color: #ff274d
}
#article2:active {
  background-color: lighten($base-color, 30); // background-color: white
}

$base-color: yellowgreen;

#article3:hover {
  background-color: adjust-hue($base-color, 20); // background-color: #66cd32
}

#article3:active {
  background-color: saturate($base-color, 50); // background-color: #abff00
  background-color: desaturate($base-color, 50); // background-color: #848d72
  background-color: mix($base-color, blue, 50); // background-color: #4d6799
  background-color: transparentize(
    $base-color,
    0.8
  ); // background-color: rgba(154, 205, 50, 0.2)
}

// list related functions
$list1: 10px 20px 30px;
$list2: 10, 20, 30px;
$list3: (10, 20, 30);

.test {
  padding: length($list1) + px; // 3px
  padding: length($list2); // 3
  padding: length($list3); // 3
  padding: length(
    (
      width: 20px,
      height: 10px,
    )
  ); // 2;
  padding: nth($list1, 2); // 20px
  padding: nth($list2, -1); // 30px
  padding: nth((list1 $list2 list3), -2); // 10, 20, 30px
  padding: set-nth($list1, 3, 4em); // 10px 20px 4em
  padding: $list1; // 10px 20px 30px; not changed at origin
  padding: set-nth(
    (Helvetica, Arial, Verdana),
    1,
    Roboto
  ); // padding: Roboto, Arial, Verdana
  padding: index($list1, 20px); // 2
  padding: index($list2, 30); // 3
  padding: index($list3, 50); // nothing printed
  padding: "----------";

  padding: join($list1, $list2); // 10px 20px 30px 10 20 30px;
  padding: join((1, 2, 3), (4 5 6)); // 1, 2, 3, 4, 5, 6
  padding: join((1, 2, 3), (4 5 6), space); // 1 2 3 4 5 6
  padding: join((1, 2, 3), (4 5 6), auto); // 1, 2, 3, 4, 5, 6
  padding: join((1, 2, 3), (4 5 6), comma); // 1, 2, 3, 4, 5, 6
  padding: list-separator($list1); // space;
  padding: list-separator($list2); // comma;
  padding: append($list1, 70px 80px); // 10px 20px 30px 70px 80px
  padding: append(
    $list1,
    70px 80px,
    comma
  ); // 10px, 20px, 30px, 70px 80px;  appended values are treated as one
  padding: append((10, 20, 30px), 70px 80px, space); // 10 20 30px 70px 80px
  padding: zip($list1, $list2); // 10px 10, 20px 20, 30px 30px
  padding: zip(red green blue, 10px 15px 5px); // red 10px, green 15px, blue 5px
  padding: is-bracketed($list3); // false
  // padding: is-bracketed([10px 20px 30]);  // true
}

// selectors related functions
$selector1: selector-nest("ul", "li");
#{$selector1} {
  // ul li {}  , have to use interpolation
  overflow: auto;
}
$selector2: selector-nest(".abc, .xyz", "p");
#{$selector2} {
  // .abc p, .xyz p {}
  overflow: auto;
}
$selector3: selector-nest(
  ".abc",
  "&_copy"
); // & does not allow any space while joining selector names
#{$selector3} {
  // .abc_copy {}
  overflow: auto;
}
$selector4: selector-nest(".abc", "&_copy, &_image");
#{$selector4} {
  // .abc_copy, .abc_image {}
  overflow: auto;
}
$selector5: selector-nest(".abc", "&:hover");
#{$selector5} {
  // .abc:hover {}
  overflow: auto;
}

$selector6: selector-append("a", ".active");
#{$selector6} {
  // a.active {}
  overflow: auto;
}

$selector7: selector-append(
  ".abc",
  "_copy"
); // no need to use & to join selector names without space in between
#{$selector7} {
  // .abc_copy {}
  overflow: auto;
}
$selector8: selector-append(".abc", "_copy, _image");
#{$selector8} {
  // .abc_copy, .abc_image {}
  overflow: auto;
}

$selector9: selector-replace("a.abc", ".abc", ".link");
#{$selector9} {
  // a.link {}
  overflow: auto;
}
$selector10: selector-replace("a.abc", "h1", "h2");
#{$selector10} {
  // a.abc {}
  overflow: auto;
}
$selector11: selector-replace(".abc .info", ".info", ".xyz");
#{$selector11} {
  // .abc .xyz {}
  overflow: auto;
}
$selector12: selector-replace(".abc .info", ".info", ".xyz li");
#{$selector12} {
  // .abc .xyz li, .xyz .abc li {}  , adds another alternative sequence of classes so that style can surely be applied to the element
  overflow: auto;
}

$selector13: is-superselector(
  "a",
  "a.active"
); // is-superselector($super: , $sub: ), first argument $super must be a superselector or bigger selector i.e. $super must select all items that $sub selects. a selects all a, but a.active selects just active class of a. So a is a superselector of a.active
#{$selector13} {
  // true {}
  overflow: auto;
}
$selector14: is-superselector(
  "nav a",
  "a"
); // nav a selects just a selector which are in nav but a selects all a selectors. So nav a is not superselector of a
#{$selector14} {
  // false {}
  overflow: auto;
}

$selector15: simple-selectors("a.abc"); // separates selectors
#{$selector15} {
  // a, .abc {}
  overflow: auto;
}

$selector16: selector-unify("a", ".active"); // unifies selectors
#{$selector16} {
  // a.active {}
  overflow: auto;
}
$selector17: selector-unify("a.active", "a.disable");
#{$selector17} {
  // a.active.disable {}
  overflow: auto;
}
// $selector18: selector-unify('a', 'h1');
// #{$selector18}{         // error
//     overflow: auto
// }
$selector19: selector-unify(".active a", "main a");
#{$selector19} {
  // .active main a, main .active a {}
  overflow: auto;
}

// map related functions
$font-weights: (
  "regular": 400,
  "medium": 500,
  "bold": 700,
);
$light-weights: (
  "lightest": 100,
  "light": 300,
);

.test {
  font-weight: map-get($font-weights, "medium"); // 500
  font-weight: map-get($font-weights, "bolden"); // nothing
  font-weight: map-keys($font-weights); // "regular", "medium", "bold"
  font-weight: map-values($font-weights); // 400, 500, 700

  $merge: map-merge(
    $font-weights,
    $light-weights
  ); // cannot display result of map-merge i.e. a map directly, have to display it's keys and values
  font-weight: map-keys(
    $merge
  ); // "regular", "medium", "bold", "lightest", "light"
  font-weight: map-values($merge); // 400, 500, 700, 100, 300

  $mrmv: map-remove($font-weights, "regular");
  font-weight: map-keys($mrmv); // "medium", "bold"

  font-weight: map-has-key($font-weights, "regular"); // true
  font-weight: map-has-key($map: $light-weights, $key: "deep"); // false

  font-weight: nth($font-weights, 2); // "medium" 500
}

// introspection
$num: 10px;
$char: "Arial";
$list: 10px 20px 30px;
$map: (
  "regular": 400,
  "medium": 500,
);
@mixin myborder {
  border-radius: 20px;
}
@function add($a, $b) {
  @return $a + $b;
}

.test {
  $sample: 20px;
  padding: variable-exists(num); // true
  padding: variable-exists($name: num); // true
  padding: variable-exists($name: listing); // false
  padding: variable-exists(sample); // true
  padding: global-variable-exists(sample); // false
  padding: global-variable-exists(num); // true
  padding: mixin-exists(myborder); // true
  padding: function-exists($name: add); // true
  padding: "-------";

  padding: type-of($char); // string
  padding: type-of($list); // list
  padding: type-of($value: $map); // map
}

/* ----------------------------- */

// @content directive
// extra content can be sent to @mixin from @include
@mixin bd-radius($value) {
  -webkit-border-radius: $value;
  -moz-border-radius: $value;
  border-radius: $value;
  @content;
}

.abc {
  @include bd-radius(10px) {
    border-style: dashed;
    padding: 5px;
  }
}
// .abc {
//     -webkit-border-radius: 10px;
//     -moz-border-radius: 10px;
//     border-radius: 10px;
//     border-style: dashed;
//     padding: 5px;
// }

@mixin test {
  @content;
}
@include test {
  .block {
    color: green;
  }
}
// .block {
//     color: green;
// }

@mixin test {
  #menu {
    @content;
  }
}
@include test {
  .block {
    color: coral;
  }
}
// #menu .block{       // sent content becomes child
//     color: coral;
// }

@mixin hover {
  &:hover {
    @content;
  }
}
.button {
  border: 1px solid black;
  @include hover {
    border-width: 2px;
  }
}
// .button{
//     border: 1px solid black;
//     button:hover{
//         border-width: 2px;
//     }
// }

// media query without @content
body {
  background: deepskyblue;
}
@media screen and (max-width: 1300px) {
  body {
    background: red;
  }
}
@media screen and (max-width: 1000px) {
  body {
    background: skyblue;
  }
}
@media screen and (max-width: 700px) {
  body {
    background: gold;
  }
}

/* ----------------------------- */

// media query with @content
body {
  background: deepskyblue;
}
@mixin media($width) {
  @media screen and (max-width: $width) {
    // repeatedly used line is written as it is inside mixin
    @content; // varying content is written using @content
  }
}
@include media(1300px) {
  body {
    background: red;
  }
}
@include media(1000px) {
  body {
    background: skyblue;
  }
}
@include media(700px) {
  body {
    background: gold;
  }
}

/* ----------------------------- */

// @media directive
// without using @media directive at proper places
.container {
  width: 1100px;
  margin: 0px auto;
}
@media screen and (max-width: 1150px) {
  .container {
    width: 900px;
  }
}
@media screen and (max-width: 950px) {
  .container {
    width: 700px;
  }
}

/* ----------------------------- */

// using @media directive at proper places, no need to write .container again and again. Write everything inside .container
.container {
  width: 1100px;
  margin: 0px auto;

  @media screen and (max-width: 1150px) {
    width: 900px;
  }
  @media screen and (max-width: 950px) {
    width: 700px;
  }
}

/* ----------------------------- */

// nesting using @at-root
// @at-root hides parent or root selector name before its child selector
// without @at-root
.item {
  color: red;

  .item-wrapper {
    color: green;

    img {
      width: 100%;
    }
  }
  .item-child {
    background: pink;
  }
}
// .item{
//     color: red;}
//     .item.item-wrapper{
//         color: green;}
//         .item .item-wrapper img{
//             width: 100%;}
//     .item .item-child{
//         background: pink;}

/* ----------------------------- */

// with @at-root partially
.item {
  color: red;
  @at-root {
    .item-wrapper {
      color: green;
      img {
        width: 100%;
      }
    }
  }
  .item-child {
    background: pink;
  }
}

// .item{
//     color: red;}
//     .item-wrapper{
//         color: green;}
//         .item-wrapper img{
//             width: 100%;}
//     .item .item-child{
//         background: pink;}

@media print {
  .item-wrapper {
    @at-root {
      .item {
        color: red;
      }
    }
  }
}
// @media print{
//     .item{
//         color: red;}}

/* ----------------------------- */

// @at-root(without: rules...) tells sass which rules should be excluded, @at-root(with: rules...) excludes all rules except those that are listed
@media print {
  .container {
    // for print media css
    font-size: 12px;
    color: green;

    @at-root (without: media) {
      // for page css
      font-size: 15px;
      color: black;
    }
  }
}
// @media print{
//     .container{
//         font-size: 12px;
//         color: green;
//     }}
//     .container{
//         font-size: 15px;
//         color: black;
//     }

/* ----------------------------- */

// @if @else
$test: 3;

p {
  @if $test<5 {
    color: red;
  }
  font-size: 20px;
}
// p{
//     color: red;
//     font-size: 20px;
// }

$test: 3;
p {
  @if $test<5 {
    color: blue;
  }
  @if 1+1==2 {
    font-size: 20px;
  }
  @if 10>30 {
    background-color: pink;
  }
}
// p {
//     color: blue;
//     font-size: 20px;
// }

$test: 10;
p {
  @if $test<5 {
    color: tomato;
  } @else {
    color: aquamarine;
    font-size: 12px;
  }
}
// p{color: aquamarine;}

$test: 7;
p {
  @if $test<5 {
    color: orange;
  } @else if $test>5 and $test<10 {
    color: green;
  } @else {
    color: indianred;
  }
}
// p{color: green;}

// @if @else with @mixin
@mixin changeColor($value) {
  font-size: $value + px;
  @if $value<10 {
    color: red;
  } @else if $value>=10 and $value<50 {
    color: green;
  } @else {
    color: cornflowerblue;
  }
}

.test1 {
  @include changeColor(20); // font-size: 20px; color: green;
}
.test2 {
  @include changeColor(100); // font-size: 100px; color: cornflowerblue;
}

// @if @else with @function (?)--------------

// @if @else real life example to create dark or light box, connected with html
@mixin box($value) {
  @if $value==dark {
    background-color: black;
    color: #fff;
  } @else if $value==light {
    background-color: lightgray;
    color: #000;
  }
}
#ads {
  @include box(dark);
  padding: 20px;
  margin: 25px;
  width: 600px;
  font-family: Arial, Helvetica, sans-serif;

  p {
    font-size: 20px;
    color: #fff;
  }
}

#sidebar {
  @include box(light);
  padding: 20px;
  margin: 25px;
  width: 600px;
  font-family: Arial, Helvetica, sans-serif;

  p {
    font-size: 20px;
    color: #000;
  }
}

/* ----------------------------- */

// @for loop directive
// @for <var> from <start> through <end>{statement} runs from <start> to <end>
// @for <var> from <start> to <end>{statement} runs from <start> to <end-1>
@for $i from 1 through 4 {
  // cannot use .list-$i, have to use interpolation for variable selector names
  .list-#{$i} {
    width: 200px * $i;
    background-color: darken(pink, $i * 20%);
    color: lighten(#000, $i * 25%);
    padding: 9px;
  }
}
// .list-1 {
//   width: 200px;
//   background-color: #ff5a77;
//   color: #404040;
//   padding: 9px;}
// .list-2 {
//   width: 400px;
//   background-color: #f3002a;
//   color: gray;
//   padding: 9px;}
// .list-3 {
//   width: 600px;
//   background-color: #8d0019;
//   color: #bfbfbf;
//   padding: 9px;}
// .list-4 {
//   width: 800px;
//   background-color: #270007;
//   color: white;
//   padding: 9px;}

/* ----------------------------- */

// @each directive 
// @each <var> in <list or map> {} runs for each item in list or each key-value in map. To pick the items/key-value pairs of list/map, in place of <var> we can use multiple variables in similar style 
// @each with simple list, list can also be non-bracketed i.e. just normal, bold, italic 
@each $i in (normal, bold, italic){ 
  .#{$i}{
    font-weight: $i;
  }
}
// .normal{
//   font-weight: normal;}
// .bold{
//   font-weight: bold;}
// .italic{
//   font-weight: italic;}


$list: normal, bold, italic;

@each $i in $list{
  .test{
    font-weight: $i;
  }
}
// .test {
//   font-weight: normal;}
// .test {
//   font-weight: bold;}
// .test {
//   font-weight: italic;}


// @each with multiple assignments from a multi-dimensional list 
$multi-list: ((normal, bold, 10px), (emphasis, italic, 15px));

@each $name, $style, $size in $multi-list {
  .#{$name}{
    font-style: $style;
    font-size: $size;
  }
}
// .normal{
//   font-style: bold;
//   font-size: 10px;}
// .emphasis{
//   font-style: italic;
//   font-size: 15px;}


// @each with multiple assignments from a map 
$map:(normal: 12px, bold: 13px, italic: 14px);

@each $key, $value in $map{
  .#{$key}{
    font-weight: $key;
    font-size: $value;
  }
}
// .normal {
//   font-weight: normal;
//   font-size: 12px;}
// .bold {
//   font-weight: bold;
//   font-size: 13px;}
// .italic {
//   font-weight: italic;
//   font-size: 14px;}

/* ----------------------------- */

// @while directive
// @while loop runs based on condition, @for loop runs based on given number range, @each loop runs based on for each item in given list/map 
// @while loop runs until a condition is true and we must increment or decrement the variable value used in condition otherwise won't get any css output, no chance of overflowing 
$i: 10;
$font-size: 10;

@while $i <= 40{
  .pd-#{$i}{
    padding-left: 1px * $i;
    font-size: $font-size + px;
  }
  $i: $i + 10;
  $font-size: $font-size + 2;
}

// .pd-10 {
//   padding-left: 10px;
//   font-size: 10px;}
// .pd-20 {
//   padding-left: 20px;
//   font-size: 12px;}
// .pd-30 {
//   padding-left: 30px;
//   font-size: 14px;}
// .pd-40 {
//   padding-left: 40px;
//   font-size: 16px;}

/* ----------------------------- */









