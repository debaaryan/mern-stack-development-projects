$primary-color: dodgerblue;
body {
    background: $primary-color;
    font-family: Arial, Helvetica, sans-serif;
}
#container {
    width: 80%;
    height: 90%;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}
h1 {
    color: $primary-color;
    font-size: 20px;
}
span {
    color: $primary-color;
}
#header {
    background-color: #fff;
    padding: 1px 10px;
    text-align: center;
}
ul {
    list-style: none;
    display: flex;
    border: 2px solid white;
    padding: 10px;
    justify-content: space-between
}
@import "links";

#content {
    display: flex;
    height: 80%;
}

#sidebar {
    background-color: skyblue;
    padding: 20px;
    width: 800px;
}

#ads {
    background-color: gold;
    @extend #sidebar;
}

#main {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
}

@mixin bd-radius($rad) {
    -webkit-border-radius: $rad;
    -moz-border-radius: $rad;
    border-radius: $rad;
}
@mixin box-shadow($top: 10px, $left: 10px, $blur: 10px, $color: burlywood) {
    -webkit-box-shadow: $top $left $blur $color;
    -moz-box-shadow: $top $left $blur $color;
    box-shadow: $top $left $blur $color;
}
#article1 {
    background-color: khaki;
    width: 50%;
    padding: 15px;
    align-self: center;
    @include bd-radius(5px);
    @include box-shadow(10px, 10px, 10px, rgb(255, 234, 0));
}
#article2 {
    background-color: lightpink;
    @include bd-radius(20px);
    @include box-shadow(-10px, 10px, 10px, magenta);
    @extend #article1;
}
%article-style {  // invisible placeholder (for reusable code)
    width: 50%;
    padding: 15px;
    align-self: center;
}
#article3 {
    background-color: yellowgreen;
    @include bd-radius(20px);
    @include box-shadow();
    @extend %article-style;
}

#equality-relational-boolean-operators {
    padding: 10px == 10px;       // true
    padding: 10px == 10em;       // false
    padding: 10px != 20px;       // true
    padding: 'arial' == arial;   // true
    padding: (5px 7px 10px) == (5px 7px 10px);   // : true 
    padding: (6px 7px 10px)==(5px 7px 10px);     // : false
    padding: '----------';

    padding: 100px > 30px;       // true
    padding: 1000ms <= 1s;       // true
    padding: 1000ms >= 2s;       // false
    // padding: 1000px <= 1s;    // error, different units, cannot convert scss to css 
    padding: '----------';

    padding: arial == 'arial' and 10px == 10;  // true 
    padding: arial == 'arial' and 10px == 20;  // false 
    padding: arial == 'arial' or 10px == 20;  // true 
    padding: not 10 == 10px;     // false 
    padding: not 10 != 10px;     // true 
}

$var1: 10;
$var2: 2;

#concatenation-arithmetic-operators {
    padding: $var1 + $var2 + px;   // 12px, addition betn numbers, concatenation betn str-str, num-str
    padding: $var1 - $var2 + px;   // 8px
    padding: $var1 * $var2 + px;   // 20px
    padding: $var1 / $var2 + px;   // 5px
    padding: $var1 % $var2 + px;   // 0px
}


// interpolation for variable in property name and css selector name
@mixin margin($position, $amount){
    margin-#{$position}: $amount + px;  // cannot use margin-$position: $amount + px 
}
#sidebar {
    @include margin(left, 10);
}
#ads {
    @include margin(right, 10);
}

@mixin set-icon($name){
    .icon-#{$name}{
        background-image: url("/icons/#{$name}.png");
    }
}
@include set-icon(duck);    // .icon-duck {background-image: url("/icons/duck.png");}


// function returns value, mixin cannot 
$container-width: 1200;

@function half($width){
    @return $width/2 + px;
}
@function one-third($width){
    @return $width/3 + px;
}
@function one-fourth($width){
    @return $width/4 + px;
}

.half-width {
    width: half($container-width);          // width: 600px;
}
.one-third-width{
    width: one-third($container-width);     // width: 400px;
}
.one-fourth-width{
    width: one-fourth($container-width);    // width: 300px;
}


// in-built function types : numbers, strings, colors, lists, selectors, introspection
// number related functions
.testNumber {
    margin: abs(-10)+px;        // 10px;
    margin: ceil(4.2)+px;       // 5px;
    margin: ceil(9.0)+px;       // 9px;
    margin: floor(3.8)+px;      // 3px;
    margin: round(7.5)+px;      // 8px;
    margin: round(7.45)+px;     // 7px;
    margin: max(1px, 3px, 5px); // 5px;
    margin: min(1px, 3px, 5px); // 1px;
    margin: percentage(0.2);    // 20%;
    margin: percentage(100px / 40px);   // 250%;
    margin: '----------';

    margin: comparable(1px, 5px);   // true;
    margin: comparable(1px, 5em);   // false;
    margin: comparable(1cm, 12mm);  // true;
    margin: random();           // 0.9123877233; 0.8456866765;
    margin: random(100);        // 62; 100;
    margin: unit(100em);        // "em";
    margin: unit(100%*2px);     // "%*px";
    margin: unitless(100px);    // false; 
    margin: unitless(100);      // true;
}

// string related functions
.testString {
    font-family: quote(Arial);       // "Arial";
    font-family: unquote("20");      // 20;
    font-family: to-upper-case('Arial'); // "ARIAL"
    font-family: to-upper-case(Arial);   // ARIAL
    font-family: to-lower-case(Arial);   // arial;
    font-family: str-length("Helvetica Neue"); // 14;
    font-family: '----------';
    
    font-family: str-index("Helvetica Neue", "Neue");   // 11;
    font-family: str-insert("Helvetica Neue", "Mono", 3);  // "HeMonolvetica Neue";
    font-family: str-slice("Helvetica Neue", 3);    // "lvetica Neue";
    font-family: str-slice("Helvetica Neue", 3, 10);   // "lvetica "; 
    font-family: str-slice("Helvetica Neue", 3, -7);   // "lvetic"; 
    font-family: unique-id();       // ugt968z6h or uhc5p42t2; 9 char id 
}

// color related functions 
$base-color: pink;

#article2 {
    background-color: $base-color;
}
#article2:hover {
    background-color: darken($base-color, 30);  // background-color: #ff274d;
}
#article2:active {
    background-color: lighten($base-color, 30);   // background-color: white;
}

$base-color: yellowgreen;

#article3:hover {
    background-color: adjust-hue($base-color, 20)   // background-color: #66cd32;
}

#article3:active {
    background-color: saturate($base-color, 50);    // background-color: #abff00;
    background-color: desaturate($base-color, 50);  // background-color: #848d72;
    background-color: mix($base-color, blue, 50); // background-color: #4d6799;
    background-color: transparentize($base-color, 0.8); // background-color: rgba(154, 205, 50, 0.2);
}


// list related functions 
$list1 : 10px 20px 30px;
$list2 : 10, 20, 30px;
$list3 : (10, 20, 30);

.test {
    padding: length($list1)+px;     // 3px;
    padding: length($list2);        // 3;
    padding: length($list3);        // 3;
    padding: length((width: 20px, height: 10px)); // 2;
    padding: nth($list1, 2);        // 20px;
    padding: nth($list2, -1);       // 30px;
    padding: nth((list1 $list2 list3), -2);  // 10, 20, 30px; 
    padding: set-nth($list1, 3, 4em);   // 10px 20px 4em;
    padding: $list1;                // 10px 20px 30px; not changed at origin 
    padding: set-nth((Helvetica, Arial, Verdana), 1, Roboto);   // padding: Roboto, Arial, Verdana;
    padding: index($list1, 20px);   // 2
    padding: index($list2, 30);     // 3
    padding: index($list3, 50);     // nothing printed 
    padding: '----------';

    padding: join($list1, $list2);  // 10px 20px 30px 10 20 30px;
    padding: join((1, 2, 3), (4 5 6));  // 1, 2, 3, 4, 5, 6;
    padding: join((1, 2, 3), (4 5 6), space);   // 1 2 3 4 5 6;
    padding: join((1, 2, 3), (4 5 6), auto);    // 1, 2, 3, 4, 5, 6;
    padding: join((1, 2, 3), (4 5 6), comma);   // 1, 2, 3, 4, 5, 6;
    padding: list-separator($list1);    // space;
    padding: list-separator($list2);    // comma;
    padding: append($list1, 70px 80px);      // 10px 20px 30px 70px 80px;
    padding: append($list1, 70px 80px, comma);  // 10px, 20px, 30px, 70px 80px;  appended values are treated as one
    padding: append((10, 20, 30px), 70px 80px, space);  // 10 20 30px 70px 80px
    padding: zip($list1, $list2);   // 10px 10, 20px 20, 30px 30px;
    padding: zip(red green blue, 10px 15px 5px);    // red 10px, green 15px, blue 5px;
    padding: is-bracketed($list3);  // false;
    // padding: is-bracketed([10px 20px 30]);  // true;
}

// selectors related functions 



